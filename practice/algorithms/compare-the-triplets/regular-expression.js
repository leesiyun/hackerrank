/*
* 정규 표현식
출처 : https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/%EC%A0%95%EA%B7%9C%EC%8B%9D


정규 표현식은 문자열에 나타나는 특정 문자 조합과 대응 시키기 위해 사용되는 패턴이다.
자바스크립트에서, 정규 표현식 또한 객체이다.
이 패턴들은 RegExp의 exec 메소드와 test 메소드, 그리고 String의 match 메소드, replace메소드, search메소드, split 메소드와 함께 쓰인다.


- 정규 표현식 만들기

정규식을 만드는 방법에는 두가지가 있다.
정규식 리터럴(슬래시 '/'로 감싸는 패턴)을 사용하고 사용 방법은 다음과 같다.
*/

let re = /ab+c/;
console.log(re); ///ab+c/

/*
정규식 리터럴은 스크립트가 불러와질 때 컴파일된다. 만약 정규식이 상수라면, 이렇게 사용하는 것이 성능을 향상 시킬 수 있다.

다른 방법으론, RegExp 객체의 생성자 함수를 호출하는 방법도 있다.
*/

re = new RegExp('ab+c');
console.log(re); ///ab+c/

/*
생성자 함수를 사용하면 정규식이 실행 시점에 컴파일 된다.
정규식의 패턴이 변경이 될 수 있는 경우, 혹은 사용자 입력과 같이 다른 출처로부터 패턴을 가져와야 하는 경우에는 생성자 함수를 사용한다.

- 특수 문자 사용하기

$ : 입력의 끝 부분과 대응된다. 만약 다중행 플래그가 참으로 설정되어 있다면, 줄 바꿈 문자의 바로 앞 부분과도 대응된다.
예를 들어, /t$/는 'eater'의 t에는 대응되지 않습니다, 그러나 'eat'과는 대응됩니다.

* : 앞의 표현식이 0회 이상 연속으로 반복되는 부분과 대응됩니다. {0,}와 같은 의미이다.
예를 들어, / bo* /는 'A ghost booooed'의 'boooo'와 대응되고, 'A bird warbled'의 b에 대응되지만 'A goat grunted'내의 어느 부분과도 대응되지 않는다.

+ : 앞의 표현식이 1회 이상 연속으로 반복되는 부분과 대응된다. {1,}와 같은 의미이다.
예를 들어, /a+/는 'candy'의 'a'에 대응되고 'caaaaaaandy'의 모든 'a' 들에 대응되지만, 'cndy'내 어느 부분과도 대응 되지 않는다.

{n, m} : n과 m은 양의 정수이고, n <= m을 만족해야한다. 앞 문자가 최소 n개, 최대 m개가 나타나는 부분에 대응된다. m이 생략된다면, m은 ∞로 취급된다.
예를 들어, /a{1,3}/는 'cndy'에서 아무것에도 대응되지 않지만, 'caandy'의 첫번째와 두번째 a와 'caaaaaaaaandy'의 첫번째에서 세번째 a에 대응된다. 
'caaaaaaaaandy'에서 더 많은 a들이 있지만, 'aaa'에만 대응된다는 점에 주목하자.

/s : 스페이스, 탭, 폼피드, 줄 바꿈 문자등을 포함한 하나의 공백 문자에 대응된다.
[\f\n\r\t\v\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]와 동일하다.
예들 들어, / \s\w* /는 'foo bar.'의 'bar'에 대응된다.

/w : 밑줄 문자를 포함한 영숫자 문자에 대응된다. [A-Za-z0-9_]와 동일하다.(대응 되는 문자를 단어 문자라고 한다.)
예를 들어, /\w/는 'apple'의 'a'에 대응되고, '$5.28'의 '5'에 대응되고, '3D.'의 '3'에 대응된다.

/W : 단어 문자가 아닌 문자에 대응된다. [^A-Za-z0-9_]와 동일하다.
예를 들어, /\W/ 또는 /[^A-Za-z0-9_]/는 '50%.'의 '%'에 대응된다.
*/
